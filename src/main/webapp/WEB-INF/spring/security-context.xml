<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<http auto-config="true">
		<!-- Merely adding <headers /> will achieve the same effect -->
		<headers>
	        <!-- Add Cache-Control and Pragma headers -->
	        <cache-control/>
	        <!-- Add X-Content-Type-Options with value of nosniff -->
	        <content-type-options/>
	        <!-- Adds HTTP Strict Transport Security (HSTS) for secure requests -->
	        <hsts/>
	        <!-- Add X-Frame-Options with a value of DENY -->
	        <frame-options/>
	        <!-- Adds X-XSS-Protection with value of 1; mode=block-->
	        <xss-protection/>
	    </headers>
	    
		<!-- Enable form based CSRF Protection for only /csrf-->
		<csrf request-matcher-ref="csrfLimiter" />
		
		<intercept-url pattern="/auth/useronly" access="ROLE_USER"/>
	</http>

	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="demo" password="demo" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="csrfLimiter" class="org.springframework.samples.mvc.csrf.CsrfPathRequestMatcher">
		<beans:constructor-arg value="^/csrf.*"/>
	</beans:bean>

</beans:beans>